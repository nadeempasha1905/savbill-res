CREATE OR REPLACE
PACKAGE BODY "PKG_CASH" AS
	--=============================================================================================
	--	WRITTEN BY				:	RAVI KUMAR
	---------------	MODIFICATION	HISTORY -------------------------------------------------------
	--	VERSION NO				:	1.00
	--	MODIFIED DATE			:   14-DEC-2014
	--	MODIFICATION PURPOSE 	:	FOR GET RCPT DETILS
	----------------------------------------------------------------------------------------------
--===================================================================================
--  PROCEDURES TO GET_RCPT_DETIALS
--=================================================================================== 
PROCEDURE GET_RCPT_DETIALS(P_TYPE VARCHAR2,P_RR_NO VARCHAR2,P_RCPT_DT VARCHAR2,P_RCPT_NO VARCHAR2,P_CNTR_NO VARCHAR2,P_PURPOSE VARCHAR2,
						   P_CHQ_DD_DT VARCHAR2,P_CHQ_DD_NO VARCHAR2,P_BANK VARCHAR2,P_LIMIT NUMBER,CUR OUT SYS_REFCURSOR)
IS
 E 	  NUMBER;
 STR  VARCHAR2(2000);

BEGIN

	SELECT NVL(LENGTH(P_RR_NO||P_RCPT_DT||P_RCPT_NO||P_CNTR_NO||P_PURPOSE||P_CHQ_DD_DT||P_CHQ_DD_NO||P_BANK),0) INTO E FROM DUAL; 
		
	IF E>0 THEN
		
		STR:='SELECT * FROM INITIAL_RCPT_PYMNT WHERE  1=1 ';
		
		IF NVL(LENGTH(P_RR_NO),0)!=0 THEN
			STR :=STR||' AND IRP_PURPOSE_KEY='''||UPPER(P_RR_NO)||'''';
		END IF;
		 
		IF NVL(LENGTH(P_RCPT_DT),0)!=0 THEN
			STR :=STR||' AND IRP_RCPT_DT='''||TO_DATE(P_RCPT_DT,'DD/MM/YYYY')||'''';
		END IF;  
		
		IF NVL(LENGTH(P_RCPT_NO),0)!=0 THEN
		STR :=STR||' AND IRP_RCPT_NO='''||P_RCPT_NO||'''';
		END IF; 				  
		       
		IF NVL(LENGTH(P_CNTR_NO),0)!=0 THEN
			STR :=STR||' AND IRP_CASH_COUNTR_NO='''||P_CNTR_NO||'''';
		END IF;
		
		IF NVL(LENGTH(P_PURPOSE),0)!=0 THEN
			STR :=STR||' AND IRP_PURPOSE='''||P_PURPOSE||'''';
		END IF;
		
		IF NVL(LENGTH(P_CHQ_DD_DT),0)!=0 THEN
			STR :=STR||' AND IRP_BCM_CHQ_DD_DT='''||TO_DATE(P_CHQ_DD_DT,'DD/MM/YYYY')||'''';
		END IF; 
				
		IF NVL(LENGTH(P_CHQ_DD_NO),0)!=0 THEN
			STR :=STR||' AND IRP_BCM_CHQ_DD_NO='''||P_CHQ_DD_NO||'''';
		END IF;
				
		IF NVL(LENGTH(P_BANK),0)!=0 THEN
			STR :=STR||' AND IRP_BCM_DRAWN_BANK='''||P_BANK||'''';
		END IF;  
				 			 		  
		STR:=STR||' ORDER BY IRP_RCPT_DT DESC';  
		
  		  
		STR:='  SELECT ROWNUM R,
				IRP_RCPT_NO RCPT_NO,TO_CHAR(IRP_RCPT_DT,''DD/MM/YYYY'') RCPT_DT,
				IRP_CASH_COUNTR_NO COUNTER_NO,
				IRP_PURPOSE PURPOSE,FN_GET_CODE_DETL_DESCR(''PYMNT_PURP'',IRP_PURPOSE) PURPOSE_DESCRIPTION,
				SUBSTR(IRP_PURPOSE_KEY,8) RR_NO,SUBSTR(IRP_NEW_PURPOSE_KEY,8) NEW_RR_NO,IRP_PAYEE_NAME PAYEE_NAME,
				IRP_AMT_PAID AMT_PAID, 
				IRP_PYMNT_MD PYMNT_MODE,FN_GET_CODE_DETL_DESCR(''PYMNT_MOD'',IRP_PYMNT_MD) IRP_PYMNT_MODE_DESCRIPTION,
				IRP_BCM_CHQ_DD_NO CHQ_DD_NO,TO_CHAR(IRP_BCM_CHQ_DD_DT,''DD/MM/YYYY'') CHQ_DD_DT,IRP_BCM_DRAWN_BANK DRAWN_BANK,
				IRP_CANCEL_FLG CANCEL_FLG,DECODE(NVL(IRP_CANCEL_FLG,''N''),''Y'',''Yes'',''No'') CANCEL_FLG_DESCRIPTION, 
				IRP_RMKS REMARKS,
				NVL(NVL((SELECT RP_POSTED_STS FROM RCPT_PYMNT WHERE RP_RCPT_NO = IRP_RCPT_NO AND RP_RCPT_DT = IRP_RCPT_DT AND RP_CASH_COUNTR_NO = IRP_CASH_COUNTR_NO),IRP_POSTED_STS),''N'') POSTED_STS,
				DECODE(NVL(NVL((SELECT RP_POSTED_STS FROM RCPT_PYMNT WHERE RP_RCPT_NO = IRP_RCPT_NO AND RP_RCPT_DT = IRP_RCPT_DT AND RP_CASH_COUNTR_NO = IRP_CASH_COUNTR_NO),IRP_POSTED_STS),''N''),''Y'',''Yes'',''N'',''No'') POSTED_STS_DESCRIPTION,
				IRP_STATUS STATUS,FN_GET_CODE_DETL_DESCR(''RCPT_POST'',IRP_STATUS) STATUS_DESCRIPTION,
				IRP_LDGR_NO LDGR_NO,IRP_FOLIO_NO FOLIO_NO,IRP_RCPT_TYP RCPT_TYP,IRP_RRNO_APPLNO_FLG RRNO_APPLNO_FLG,
				IRP_PRINTED_FLG PRINTED_FLG,DECODE(NVL(IRP_PRINTED_FLG,''N''),''Y'',''Yes'',''No'') PRINTED_FLG_DESCRIPTION, 
				IRP_LESS_AMT_REALISED LESS_AMT_REALISED,IRP_LESS_AMT_POSTED_STS LESS_AMT_POSTED_STS,
				IRP_USRID USERID,TO_CHAR(IRP_TMPSTP,''DD/MM/YYYY HH:MI:SS AM'') TMPSTP
				FROM('||STR||')';


    	
    	IF P_TYPE='CNT' THEN
    		STR:='  SELECT COUNT(1) AS CNT FROM ('||STR||') ';
    	ELSE
	    	IF NVL(P_LIMIT,0)=0 THEN
	    		STR:='  SELECT * FROM ('||STR||') ';
	    	ELSE	
	    		STR:='  SELECT * FROM ('||STR||') WHERE R='||NVL(P_LIMIT,1)||'';
	    	END IF;
		 END IF;
        
        OPEN CUR FOR STR;
	   	--OPEN CUR FOR SELECT STR FROM DUAL;
  	ELSE    
   	
   	    OPEN CUR FOR SELECT 'Invalid Input...!' AS RESP FROM DUAL; 
   	    
   	END IF;

 
END GET_RCPT_DETIALS; 

--===================================================================================
--  PROCEDURES TO GET_RCPT_POSTED_DETAILS
--=================================================================================== 
PROCEDURE GET_RCPT_POSTED_DETAILS(P_RCPT_DT VARCHAR2,P_RCPT_NO VARCHAR2,P_CNTR_NO VARCHAR2,CUR OUT SYS_REFCURSOR)
IS

BEGIN

OPEN CUR FOR    SELECT ROWNUM ROW_NUM,A.*
				FROM
				(SELECT RP_PURPOSE_KEY RR_NO,RP_RCPT_NO RCPT_NO,TO_CHAR(RP_RCPT_DT, 'DD/MM/YYYY') RCPT_DT, 
				RP_CASH_COUNTR_NO COUNTR_NO,SUBSTR(RP_CASH_COUNTR_NO,8)||' - '||NVL((SELECT LC_CNTR_DESC FROM LOC_COUNTERS WHERE LC_CNTR_NO=RP_CASH_COUNTR_NO),'') COUNTR_NAME,
				RP_PURPOSE PURPOSE,FN_GET_CODE_DESCRIPTION('PYMNT_PURP',RP_PURPOSE) PURPOSE_DESCRIPTION,
				RP_RCPT_TYP RCPT_TYP,CCD_DESCR PYMNT_MODE,RP_AMT_PAID AMT_PAID,RP_PAYEE_NAME PAYEE_NAME,RP_CANCEL_FLG CANCEL_FLG,RP_RMKS REMARKS,
				RP_POSTED_STS POSTED_STS,RP_PRINTED_FLG PRINTED_FLG,RP_RRNO_APPLNO_FLG RRNO_APPLNO_FLG,
				RP_BCM_CHQ_DD_NO CHQ_DD_NO,TO_CHAR(RP_BCM_CHQ_DD_DT, 'DD/MM/YYYY') CHQ_DD_DT,RP_BCM_DRAWN_BANK DRAWN_BANK,
				RP_LESS_AMT_REALISED LESS_AMT_REALISED,RP_LESS_AMT_POSTED_STS LESS_AMT_POSTED_STS,RP_USRID USRID,NVL(TO_CHAR(RP_TMPSTP, 'DD/MM/YYYY HH:MI:SS AM'), ' ') TMPSTP
				FROM RCPT_PYMNT RP, CODE_DETL CD WHERE CD.CCD_CD_VAL = RP.RP_PYMNT_MD
				AND CD.CCD_CCM_CD_TYP = 'PYMNT_MOD'
				AND RP.RP_RCPT_DT = TO_DATE(P_RCPT_DT,'DD/MM/YYYY')
				AND RP.RP_CASH_COUNTR_NO =P_CNTR_NO
				AND RP.RP_RCPT_NO = P_RCPT_NO) A;

END GET_RCPT_POSTED_DETAILS;   

--===================================================================================
--  PROCEDURES TO GET_LIST_OF_PAYMENTS
--=================================================================================== 
PROCEDURE GET_LIST_OF_PAYMENTS(P_RR_NO VARCHAR2,P_NO_OF_MONTHS NUMBER DEFAULT 12,P_FROM_DT VARCHAR2,P_TO_DT VARCHAR2,CUR OUT SYS_REFCURSOR)
IS   

 MAX_RCPT_DT DATE; 
 FROM_DT DATE;
 TO_DT DATE;
 E 	  NUMBER;

BEGIN

	SELECT NVL(LENGTH(P_RR_NO||P_NO_OF_MONTHS||P_FROM_DT||P_TO_DT),0) INTO E FROM DUAL; 
		
	IF E>0 THEN
	
		BEGIN 
			SELECT MAX(RP_RCPT_DT) INTO MAX_RCPT_DT FROM RCPT_PYMNT WHERE RP_PURPOSE_KEY=P_RR_NO;
			EXCEPTION WHEN NO_DATA_FOUND THEN
			NULL;
		END;
		
		IF NVL(LENGTH(P_TO_DT),0)=0  THEN
			TO_DT:=MAX_RCPT_DT;
		ELSE
			TO_DT:=TO_DATE(P_TO_DT,'DD/MM/YYYY');
		END IF;	
		
		IF NVL(LENGTH(P_FROM_DT),0)=0  THEN
			FROM_DT:=ADD_MONTHS(MAX_RCPT_DT,-(NVL(P_NO_OF_MONTHS,12)-1));
		ELSE
			FROM_DT:=TO_DATE(P_FROM_DT,'DD/MM/YYYY');
		END IF;
		
		
		OPEN CUR FOR 	SELECT ROWNUM ROW_NUM,A.*
						FROM
						(SELECT SUBSTR(CD.CD_RR_NO,8) RR_NO,CD.CD_CONSMR_NAME CUSTOMER_NAME,CD.CD_PREMISE_ADDR1 PREMISE_ADDR1,
						I.RP_RCPT_NO RCPT_NO,TO_CHAR(I.RP_RCPT_DT,'dd/mm/yyyy') RCPT_DT,SUBSTR(I.RP_CASH_COUNTR_NO,8) COUNTR_NO,
						FN_GET_CODE_DESCRIPTION('PYMNT_PURP',RP_PURPOSE) PYMNT_PURPOSE,
						NVL(FN_GET_CODE_DESCRIPTION('PYMNT_MOD',I.RP_PYMNT_MD),I.RP_PYMNT_MD) PYMNT_MODE,
						I.RP_AMT_PAID AMT_PAID,
						I.RP_BCM_CHQ_DD_NO CHQ_DD_NO,
						TO_CHAR(I.RP_BCM_CHQ_DD_DT,'dd/mm/yyyy') CHQ_DD_DT,
						I.RP_BCM_DRAWN_BANK DRAWN_BANK,
						C.BCM_ACT_DISHONOUR_DT DISHONOUR_DT
						FROM CUST_DESCR CD,RCPT_PYMNT I,CHEQUE_MASTER C 
						WHERE I.RP_PURPOSE_KEY=CD.CD_RR_NO
						AND I.RP_CANCEL_FLG='N'
						AND RP_BCM_CHQ_DD_NO = C.BCM_CHQ_DD_NO(+)
						AND RP_BCM_CHQ_DD_DT = C.BCM_CHQ_DD_DT(+)
						AND RP_BCM_DRAWN_BANK = C.BCM_DRAWN_BANK(+)
						AND CD.CD_RR_NO=UPPER(P_RR_NO)
						AND RP_RCPT_DT BETWEEN FROM_DT AND TO_DT
						ORDER BY RP_RCPT_DT DESC) A;
	ELSE    
   	
   	    OPEN cur FOR select 'Invalid input' AS RESP from dual; 
   	
   	END IF;


END GET_LIST_OF_PAYMENTS; 

--===================================================================================
--  PROCEDURES TO GET_RCPT_DETIALS_FOR_POST
--=================================================================================== 
PROCEDURE GET_RCPT_DETIALS_FOR_POST(P_LOCTION_CD VARCHAR2,P_RCPT_DT VARCHAR2,P_CNTR_NO VARCHAR2,CUR OUT SYS_REFCURSOR)
IS  

 E 	  NUMBER;
 STR VARCHAR2(2000);
 
BEGIN

	SELECT NVL(LENGTH(P_LOCTION_CD||P_RCPT_DT||P_CNTR_NO),0) INTO E FROM DUAL; 
		
	IF E>0 THEN
		
	STR:='  SELECT NVL(SUBSTR(IRP_PURPOSE_KEY,8),'' '') RR_NO,IRP_RCPT_NO RCPT_NO,TO_CHAR(IRP_RCPT_DT,''DD/MM/YYYY'') RCPT_DT,
			IRP_CASH_COUNTR_NO COUNTR_NO,SUBSTR(IRP_CASH_COUNTR_NO,8)||'' - ''||NVL((SELECT LC_CNTR_DESC FROM LOC_COUNTERS WHERE LC_CNTR_NO=IRP_CASH_COUNTR_NO),'''') COUNTR_NAME,
			IRP_PYMNT_MD PYMNT_MODE,FN_GET_CODE_DESCRIPTION(''PYMNT_MOD'',IRP_PYMNT_MD) PYMNT_MODE_DESCRIPTION,
			IRP_PURPOSE PURPOSE,FN_GET_CODE_DETL_DESCR(''PYMNT_PURP'',IRP_PURPOSE) PURPOSE_DESCR,
			IRP_RCPT_TYP RCPT_TYP,IRP_PAYEE_NAME PAYEE_NAME,IRP_CANCEL_FLG CANCEL_FLG,
			IRP_RMKS REMARKS,IRP_POSTED_STS POSTED_STS,IRP_PRINTED_FLG PRINTED_FLG,IRP_RRNO_APPLNO_FLG RRNO_APPLNO_FLG,
			IRP_BCM_CHQ_DD_NO CHQ_DD_NO,TO_CHAR(IRP_BCM_CHQ_DD_DT,''DD/MM/YYYY'') CHQ_DD_DT,IRP_BCM_DRAWN_BANK DRAWN_BANK,IRP_LESS_AMT_REALISED LESS_AMT_REALISED,
			IRP_LESS_AMT_POSTED_STS LESS_AMT_POSTED_STS,IRP_USRID USERID,NVL(TO_CHAR(IRP_TMPSTP, ''DD/MM/YYYY HH:MI:SS AM''), '' '') TMPSTP,
			IRP_LDGR_NO LDGR_NO,IRP_FOLIO_NO FOLIO_NO,IRP_STATUS STATUS,CCD_DESCR DESCRIPTION,
			NVL(IRP_AMT_PAID,0) AMT_PAID,IRP_PURPOSE_KEY PURPOSE_KEY,NVL(IRP_NEW_PURPOSE_KEY,'' '') NEW_PURPOSE_KEY
			FROM INITIAL_RCPT_PYMNT, CODE_DETL
			WHERE IRP_RRNO_APPLNO_FLG = ''R'' AND IRP_CANCEL_FLG = ''N'' 
			AND IRP_STATUS IN (''1'',''2'',''3'') AND IRP_STATUS =CCD_CD_VAL 
			AND CCD_CCM_CD_TYP=''RCPT_POST''  AND SUBSTR(NVL(IRP_RMKS,''AAAAA''), 1, 5)  NOT IN (''AWPST'',''ADJST'')
			AND IRP_NEW_PURPOSE_KEY IS NULL AND SUBSTR(NVL(IRP_RMKS,''AAAAA''), 1, 5)  <> ''ADJST''
			AND SUBSTR(IRP_PURPOSE_KEY,1,7)='''||P_LOCTION_CD||'''';
		
		IF NVL(LENGTH(P_RCPT_DT),0)=0 then
			STR:=STR||'';
		ELSE
			STR :=STR||' AND IRP_RCPT_DT=TO_DATE('''||P_RCPT_DT||''',''dd/MM/yyyy'')';
		END IF;
		 
		IF NVL(LENGTH(P_CNTR_NO),0)=0 then
			STR:=STR||'';
		ELSE
			STR :=STR||' AND IRP_CASH_COUNTR_NO='''||P_CNTR_NO||'''';
		END IF;  
		
				 			 		  
	 	STR:=STR||' ORDER BY LPAD(IRP_CASH_COUNTR_NO, 15, '' ''),IRP_RCPT_DT DESC,LPAD(IRP_RCPT_NO, 15, '' ''),IRP_RCPT_DT DESC,LPAD(IRP_CASH_COUNTR_NO, 15, '' '') ';  
		  
        STR:=' SELECT ROWNUM ROW_NUM,A.* FROM ('||STR||') A';
               
        OPEN CUR FOR STR;
	   	--OPEN cur FOR SELECT STR FROM DUAL;
  	ELSE    
   	
   	    OPEN cur FOR select 'Invalid input' AS RESP from dual; 
   	    
   	END IF;

 
END GET_RCPT_DETIALS_FOR_POST;  


--===================================================================================
--  PROCEDURES TO INSERT_CHEQUE_MASTER
--===================================================================================

PROCEDURE INSERT_CHEQUE_MASTER (CUR OUT SYS_REFCURSOR,P_CHQ_DD_NO VARCHAR2, P_CHQ_DD_DT VARCHAR2, P_DRAWN_BANK VARCHAR2, P_RCPT_DT VARCHAR2, P_PYMNT_MD VARCHAR2, P_CHQ_DD_AMT VARCHAR2, P_USRID VARCHAR2)
	IS

 	 RES 		VARCHAR2(100);
	 E          NUMBER;

	BEGIN

		SELECT NVL(LENGTH(P_CHQ_DD_NO||P_CHQ_DD_DT||P_DRAWN_BANK||P_RCPT_DT||P_PYMNT_MD||P_CHQ_DD_AMT||P_USRID),0) INTO E FROM DUAL;


		IF E=0 THEN
			RES:='INVALID INPUT';
		ELSE

			BEGIN

				INSERT INTO CHEQUE_MASTER (BCM_CHQ_DD_NO, BCM_CHQ_DD_DT, BCM_DRAWN_BANK, BCM_RCPT_DT, BCM_RCPT_TYP, BCM_PYMNT_MD, BCM_CHQ_DD_AMT, BCM_REALISED_AMT, BCM_REALISED_DT, BCM_CANCEL_FLG, BCM_USRID, BCM_TMPSTP)
				                    VALUES(P_CHQ_DD_NO,TO_DATE(P_CHQ_DD_DT,'DD/MM/YYYY'),P_DRAWN_BANK,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),'A',P_PYMNT_MD,P_CHQ_DD_AMT,'0','','N',P_USRID,SYSDATE);

				EXCEPTION WHEN OTHERS THEN
				RAISE;
				RES:='FAIL';
			END;

				IF SQL%ROWCOUNT>0 THEN
					RES:='SUCCESS';
					COMMIT;
				ELSE
					RES:='FAIL';
					ROLLBACK;
				END IF;

		END IF;

		OPEN CUR FOR SELECT RES AS RESP FROM DUAL;

	END;

	--===================================================================================
--  PROCEDURES TO INSERT_CHEQUE_MASTER_HRT
--===================================================================================

PROCEDURE INSERT_CHEQUE_MASTER_HRT (CUR OUT SYS_REFCURSOR,P_CHQ_DD_NO VARCHAR2, P_CHQ_DD_DT VARCHAR2, P_DRAWN_BANK VARCHAR2, P_RCPT_DT VARCHAR2, P_PYMNT_MD VARCHAR2, P_CHQ_DD_AMT VARCHAR2, P_USRID VARCHAR2)
	IS

 	 RES 		VARCHAR2(100);
	 E          NUMBER;

	BEGIN

		SELECT NVL(LENGTH(P_CHQ_DD_NO||P_CHQ_DD_DT||P_DRAWN_BANK||P_RCPT_DT||P_PYMNT_MD||P_CHQ_DD_AMT||P_USRID),0) INTO E FROM DUAL;


		IF E=0 THEN
			RES:='INVALID INPUT';
		ELSE

			BEGIN

				INSERT INTO CHEQUE_MASTER (BCM_CHQ_DD_NO, BCM_CHQ_DD_DT, BCM_DRAWN_BANK, BCM_RCPT_DT, BCM_RCPT_TYP, BCM_PYMNT_MD, BCM_CHQ_DD_AMT, BCM_REALISED_AMT, BCM_REALISED_DT, BCM_CANCEL_FLG, BCM_USRID, BCM_TMPSTP)
				                    VALUES(P_CHQ_DD_NO,TO_DATE(P_CHQ_DD_DT,'DD/MM/YYYY'),P_DRAWN_BANK,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),'A',P_PYMNT_MD,P_CHQ_DD_AMT,'0','','N',P_USRID,SYSDATE);

				EXCEPTION WHEN OTHERS THEN
				RAISE;
				RES:='FAIL';
			END;

				IF SQL%ROWCOUNT>0 THEN
					RES:='SUCCESS';
					COMMIT;
				ELSE
					RES:='FAIL';
					ROLLBACK;
				END IF;

		END IF;

		OPEN CUR FOR SELECT RES AS RESP FROM DUAL;

	END;


--===================================================================================
--  PROCEDURES TO INSERT_RCPT_DETIALS
--===================================================================================

PROCEDURE INSERT_RCPT_DETIALS(CUR OUT SYS_REFCURSOR,P_TRANSACTION_ID VARCHAR2,P_RCPT_DT VARCHAR2, P_CASH_COUNTR_NO VARCHAR2, P_PURPOSE VARCHAR2,P_PURPOSE_KEY VARCHAR2, P_PYMNT_MD VARCHAR2, P_AMT_PAID VARCHAR2,
                                                    P_PAYEE_NAME VARCHAR2, P_RMKS VARCHAR2, P_BCM_CHQ_DD_NO VARCHAR2, P_BCM_CHQ_DD_DT VARCHAR2, P_BCM_DRAWN_BANK VARCHAR2, P_USRID VARCHAR2)
	IS

 	 RES 		VARCHAR2(100);
	 E          NUMBER;
	 V_RCPT_NO  NUMBER;

	BEGIN

		SELECT NVL(LENGTH(P_TRANSACTION_ID||P_RCPT_DT||P_CASH_COUNTR_NO||P_PURPOSE||P_PURPOSE_KEY||P_PYMNT_MD||P_AMT_PAID||P_PAYEE_NAME||P_RMKS||P_BCM_CHQ_DD_NO||P_BCM_CHQ_DD_DT||P_BCM_DRAWN_BANK||P_USRID),0) INTO E FROM DUAL;


		IF E=0 THEN
			RES:='INVALID INPUT';
		ELSE

			BEGIN
				SELECT NVL(MAX(to_number(IRP_RCPT_NO)),0)+1 INTO V_RCPT_NO FROM INITIAL_RCPT_PYMNT WHERE IRP_CASH_COUNTR_NO = P_CASH_COUNTR_NO;
				EXCEPTION WHEN OTHERS THEN
				V_RCPT_NO:=1;
			END;


			BEGIN

				INSERT INTO INITIAL_RCPT_PYMNT (IRP_RCPT_NO, IRP_RCPT_DT, IRP_CASH_COUNTR_NO, IRP_PURPOSE, IRP_RCPT_TYP, IRP_PURPOSE_KEY, IRP_PYMNT_MD, IRP_AMT_PAID, IRP_PAYEE_NAME, IRP_CANCEL_FLG,
											    IRP_RMKS, IRP_POSTED_STS, IRP_PRINTED_FLG, IRP_BCM_CHQ_DD_NO, IRP_RRNO_APPLNO_FLG, IRP_BCM_CHQ_DD_DT, IRP_BCM_DRAWN_BANK,
											    IRP_LESS_AMT_REALISED, IRP_LESS_AMT_POSTED_STS, IRP_NEW_PURPOSE_KEY, IRP_LDGR_NO, IRP_FOLIO_NO, IRP_STATUS, IRP_USRID, IRP_TMPSTP)
				                         VALUES(V_RCPT_NO,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),P_CASH_COUNTR_NO,P_PURPOSE,'A',P_PURPOSE_KEY,P_PYMNT_MD,P_AMT_PAID,P_PAYEE_NAME,'N',
				                                P_RMKS,'N','Y',P_BCM_CHQ_DD_NO,'R',TO_DATE(P_BCM_CHQ_DD_DT,'DD/MM/YYYY'),P_BCM_DRAWN_BANK,
				                                0,'','','','','1',P_USRID,SYSDATE);

				EXCEPTION WHEN OTHERS THEN
				RES:='FAIL';
				RAISE;
			END;

				IF SQL%ROWCOUNT>0 THEN

					BEGIN
						INSERT INTO IRP_TRANSACTIONS (IRPT_TRANSACTION_ID,IRPT_RCPT_NO,IRPT_RCPT_DT,IRPT_CASH_COUNTR_NO,IRPT_USRID,IRPT_TMPSTP)
						                      VALUES (P_TRANSACTION_ID,V_RCPT_NO,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),P_CASH_COUNTR_NO,P_USRID,SYSDATE);
						EXCEPTION WHEN OTHERS THEN
						RAISE;
						RES:='FAIL';
					END;

					IF SQL%ROWCOUNT>0 THEN
					RES:='SUCCESS';
						COMMIT;
					ELSE
						RES:='FAIL';
						ROLLBACK;
					END IF;

				ELSE
					RES:='FAIL';
					ROLLBACK;
				END IF;

		END IF;

		OPEN CUR FOR SELECT RES AS RESP FROM DUAL;

	END;

	--===================================================================================
--  PROCEDURES TO INSERT_RCPT_DETIALS_HRT
--===================================================================================

PROCEDURE INSERT_RCPT_DETIALS_HRT(CUR OUT SYS_REFCURSOR,P_TRANSACTION_ID VARCHAR2,P_RCPT_NO VARCHAR2,P_RCPT_DT VARCHAR2, P_CASH_COUNTR_NO VARCHAR2, P_PURPOSE VARCHAR2,P_PURPOSE_KEY VARCHAR2, P_PYMNT_MD VARCHAR2, P_AMT_PAID VARCHAR2,
                                                    P_PAYEE_NAME VARCHAR2, P_RMKS VARCHAR2, P_BCM_CHQ_DD_NO VARCHAR2, P_BCM_CHQ_DD_DT VARCHAR2, P_BCM_DRAWN_BANK VARCHAR2, P_USRID VARCHAR2)
	IS

 	 RES 		VARCHAR2(100);
	 E          NUMBER;

	BEGIN

		SELECT NVL(LENGTH(P_TRANSACTION_ID||P_RCPT_DT||P_CASH_COUNTR_NO||P_PURPOSE||P_PURPOSE_KEY||P_PYMNT_MD||P_AMT_PAID||P_PAYEE_NAME||P_RMKS||P_BCM_CHQ_DD_NO||P_BCM_CHQ_DD_DT||P_BCM_DRAWN_BANK||P_USRID),0) INTO E FROM DUAL;


		IF E=0 THEN
			RES:='INVALID INPUT';
		ELSE

		BEGIN

				INSERT INTO INITIAL_RCPT_PYMNT (IRP_RCPT_NO, IRP_RCPT_DT, IRP_CASH_COUNTR_NO, IRP_PURPOSE, IRP_RCPT_TYP, IRP_PURPOSE_KEY, IRP_PYMNT_MD, IRP_AMT_PAID, IRP_PAYEE_NAME, IRP_CANCEL_FLG,
											    IRP_RMKS, IRP_POSTED_STS, IRP_PRINTED_FLG, IRP_BCM_CHQ_DD_NO, IRP_RRNO_APPLNO_FLG, IRP_BCM_CHQ_DD_DT, IRP_BCM_DRAWN_BANK,
											    IRP_LESS_AMT_REALISED, IRP_LESS_AMT_POSTED_STS, IRP_NEW_PURPOSE_KEY, IRP_LDGR_NO, IRP_FOLIO_NO, IRP_STATUS, IRP_USRID, IRP_TMPSTP)
				                         VALUES(P_RCPT_NO,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),P_CASH_COUNTR_NO,P_PURPOSE,'M',P_PURPOSE_KEY,P_PYMNT_MD,P_AMT_PAID,P_PAYEE_NAME,'N',
				                                P_RMKS,'N','Y',P_BCM_CHQ_DD_NO,'R',TO_DATE(P_BCM_CHQ_DD_DT,'DD/MM/YYYY'),P_BCM_DRAWN_BANK,
				                                0,'','','','','1',P_USRID,SYSDATE);

				EXCEPTION WHEN OTHERS THEN
				RES:='FAIL';
				RAISE;
			END;

				IF SQL%ROWCOUNT>0 THEN

					BEGIN
						INSERT INTO IRP_TRANSACTIONS (IRPT_TRANSACTION_ID,IRPT_RCPT_NO,IRPT_RCPT_DT,IRPT_CASH_COUNTR_NO,IRPT_USRID,IRPT_TMPSTP)
						                      VALUES (P_TRANSACTION_ID,P_RCPT_NO,TO_DATE(P_RCPT_DT,'DD/MM/YYYY'),P_CASH_COUNTR_NO,P_USRID,SYSDATE);
						EXCEPTION WHEN OTHERS THEN
						RAISE;
						RES:='FAIL';
					END;

					IF SQL%ROWCOUNT>0 THEN
					RES:='SUCCESS';
						COMMIT;
					ELSE
						RES:='FAIL';
						ROLLBACK;
					END IF;

				ELSE
					RES:='FAIL';
					ROLLBACK;
				END IF;

		END IF;

		OPEN CUR FOR SELECT RES AS RESP FROM DUAL;

	END;
                      

--===================================================================================
--  PROCEDURES TO GET_PRINT_RCPTS
--===================================================================================
PROCEDURE GET_PRINT_RCPTS(CUR OUT SYS_REFCURSOR,P_TRANSACTION_ID VARCHAR2)
IS

BEGIN

OPEN CUR FOR    SELECT ROWNUM ROW_NUM,A.*
				FROM
				(SELECT NVL((SELECT CLC_NAME FROM LOCATION WHERE CLC_CD = SUBSTR(IRP_PURPOSE_KEY,1,7)),'') LOCATION,
				IRP_RCPT_NO RCPT_NO,TO_CHAR(IRP_RCPT_DT,'DD/MM/YYYY') RCPT_DT,IRP_CASH_COUNTR_NO CASH_COUNTR_NO,
				FN_GET_CODE_DESCRIPTION('PYMNT_PURP',IRP_PURPOSE) RCPT_PURPOSE,FN_GET_CODE_DESCRIPTION('PYMNT_MOD',IRP_PYMNT_MD) PYMNT_MODE,
				SUBSTR(IRP_PURPOSE_KEY,8) SHOP_NUMBER,IVRS_ID SHOP_ID,IRP_PAYEE_NAME PAYEE_NAME,IRP_AMT_PAID PAID_AMOUNT,
				IRP_BCM_CHQ_DD_NO CHQ_DD_NO,IRP_BCM_CHQ_DD_DT CHQ_DD_DT,IRP_BCM_DRAWN_BANK DRAWN_BANK,
				'Rupees '||spell_money(IRP_AMT_PAID) AMT_IN_WORDS,
				IRP_USRID USER_ID,TO_CHAR(IRP_TMPSTP,'DD/MM/YYYY HH:MI:SS AM') TMPSTP
				FROM INITIAL_RCPT_PYMNT,IRP_TRANSACTIONS,IVRS_CUST_MASTR
				WHERE IRPT_TRANSACTION_ID = P_TRANSACTION_ID
				AND NVL(IRP_CANCEL_FLG,'N') = 'N'
				AND IRPT_RCPT_NO = IRP_RCPT_NO
				AND IRPT_RCPT_DT = IRP_RCPT_DT
				AND IRPT_CASH_COUNTR_NO = IRP_CASH_COUNTR_NO
				AND IRP_PURPOSE_KEY = IVRS_BCN_RR_NO (+)) A;

END GET_PRINT_RCPTS;

--===================================================================================
--  PROCEDURES TO GET_CASH_COUNTER_SUMMARY
--===================================================================================
PROCEDURE GET_CASH_COUNTER_SUMMARY(CUR OUT SYS_REFCURSOR,P_RCPT_DT VARCHAR2,P_CNTR_NO VARCHAR2)
IS

BEGIN

OPEN CUR FOR    SELECT ROWNUM ROW_NUM,A.*
				FROM
				(SELECT NVL(MIN(IRP_RCPT_NO),0) FIRST_RCPT_NUMBER,NVL(MAX(IRP_RCPT_NO),0) LAST_RCPT_NUMBER,COUNT(*) RCPT_NUMBERS,
				NVL(SUM(CASE WHEN IRP_PYMNT_MD='C' AND IRP_CANCEL_FLG ='N' THEN 1 ELSE 0 END),0) CASH_RCPTS,NVL(SUM(CASE WHEN IRP_PYMNT_MD='C'  AND IRP_CANCEL_FLG ='N'  THEN IRP_AMT_PAID ELSE 0 END),0) CASH_AMOUNT,
				NVL(SUM(CASE WHEN IRP_PYMNT_MD IN ('CHQ','DD') AND IRP_CANCEL_FLG ='N' THEN 1 ELSE 0 END),0) CHQ_DD_RCPTS,NVL(SUM(CASE WHEN IRP_PYMNT_MD IN ('CHQ','DD')  AND IRP_CANCEL_FLG ='N'  THEN IRP_AMT_PAID ELSE 0 END),0) CHQ_DD_AMOUNT,
				NVL(SUM(CASE WHEN IRP_PYMNT_MD NOT IN ('C','CHQ','DD') AND IRP_CANCEL_FLG ='N' THEN 1 ELSE 0 END),0) OTH_RCPTS,NVL(SUM(CASE WHEN IRP_PYMNT_MD NOT IN ('C','CHQ','DD')  AND IRP_CANCEL_FLG ='N'  THEN IRP_AMT_PAID ELSE 0 END),0) OTH_AMOUNT,
				NVL(SUM(CASE WHEN IRP_CANCEL_FLG ='Y' THEN 1 ELSE 0 END),0) CANCELLED_RCPTS,NVL(SUM(CASE WHEN IRP_CANCEL_FLG ='Y'  THEN IRP_AMT_PAID ELSE 0 END),0) CANCELLED_AMOUNT
				FROM INITIAL_RCPT_PYMNT
				WHERE IRP_CASH_COUNTR_NO = P_CNTR_NO AND IRP_RCPT_DT = TO_DATE (P_RCPT_DT,'DD/MM/YYYY')) A;

END GET_CASH_COUNTER_SUMMARY;


--===================================================================================
--  PROCEDURES TO GET_PURPOSEWISE_REPORTS
--===================================================================================
PROCEDURE GET_PURPOSEWISE_REPORTS(CUR OUT SYS_REFCURSOR, P_LOCTION_CD IN VARCHAR2, P_CNTR_NO IN VARCHAR2, P_FROM_DT IN VARCHAR2, P_TO_DT IN VARCHAR2, P_HEADER IN BOOLEAN)
IS   
 
 E 	  NUMBER;
 STR  VARCHAR2(4000);

BEGIN

	SELECT NVL(LENGTH(P_LOCTION_CD||P_CNTR_NO||P_FROM_DT||P_TO_DT),0) INTO E FROM DUAL; 
		
	IF E>0 THEN
	
		  
		
			STR :=' WITH T AS (
					SELECT P.PD_ACCNT_CODE ACCOUNT_CODE , P.PD_PURPOSE PYMNT_PURPOSE, SUM(I.IRP_AMT_PAID) AMOUNT
					FROM INITIAL_RCPT_PYMNT I 
					LEFT OUTER JOIN PURPOSE_DETL P ON P.PD_VAL = I.IRP_PURPOSE
					WHERE I.IRP_RCPT_DT BETWEEN TO_DATE('''||P_FROM_DT||''',''DD/MM/YYYY'') AND TO_DATE('''||P_TO_DT||''',''DD/MM/YYYY'')
					AND NVL(I.IRP_NEW_PURPOSE_KEY, I.IRP_PURPOSE_KEY) LIKE '''||P_LOCTION_CD||'%'' 
					AND NVL(I.IRP_CANCEL_FLG ,''N'') = ''N'' '; 
					
					IF LENGTH(P_CNTR_NO) > 0 THEN  
						STR := STR ||' AND I.IRP_CASH_COUNTR_NO = '''||P_CNTR_NO||''' ';
					END IF; 
					
					STR := STR ||' GROUP BY P.PD_PURPOSE, P.PD_ACCNT_CODE
					               ORDER BY 2,1 )'; 
					               
					IF P_HEADER = TRUE THEN 
						STR := STR ||'  SELECT * FROM T
										UNION
										SELECT ''Total:'' ACCOUNT_CODE, NULL PYMNT_PURPOSE, SUM(T.AMOUNT) AMT FROM T ORDER BY 2,1';	
					ELSE 
						STR := STR ||'  SELECT * FROM T  ORDER BY 2,1';
					END IF;
					
			STR := 'SELECT ROWNUM ROW_NO, A.* FROM('||STR||') A';
					
		
		   	OPEN cur FOR STR;
		    --OPEN CUR FOR SELECT STR FROM DUAL;
	   	ELSE    
	   	
   	    OPEN cur FOR select 'Invalid input' AS RESP from dual; 
   	    
   	END IF;  
   	
   	--VAR CUR REFCURSOR;
   	--EXEC PKG_CASH.GET_PURPOSEWISE_REPORTS(:CUR, '2110105', '', '01/06/2013', '30/06/2013', TRUE);


END GET_PURPOSEWISE_REPORTS; 



END PKG_CASH;

/