CREATE OR REPLACE
PROCEDURE GET_COLLECTION_EFFICIENCY(CUR OUT SYS_REFCURSOR, P_GROUP_TYPE IN VARCHAR2, P_LOCATION_CODE IN VARCHAR2, P_MR_CODE IN VARCHAR2, P_TRFS IN VARCHAR2, P_FROM_DT IN VARCHAR2, P_TO_DT IN VARCHAR2, P_HEADER IN BOOLEAN)
IS   
 
 E 	  NUMBER;
 STR  VARCHAR2(4000);

BEGIN

	SELECT NVL(LENGTH(P_GROUP_TYPE||P_LOCATION_CODE||P_MR_CODE||P_TRFS||P_FROM_DT||P_TO_DT),0) INTO E FROM DUAL; 
		
	IF E>0 THEN
	
		IF P_GROUP_TYPE = 'TRF' THEN
		
			OPEN cur FOR
			WITH T AS
			(SELECT SUBSTR(REPLACE(TM_SDESCR,'DB'),1,3) TRF, SUM(NVL(CONSMP,0)) CONSMP,
			ROUND(SUM(NVL(DMD,0)) + SUM(NVL(DBT,0)) - SUM(NVL(RBT,0)) - SUM(NVL(WDRL,0)),0) AS DMD,
			ROUND(SUM(NVL(COL,0)),0) AS COL,
			ROUND(SUM(NVL(CRDT,0)),0) AS CRDT
			FROM
			(SELECT CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(CBM_BILL_DT,'DD') DT, NVL(SUM(NVL(CBM_UNIT_CONSMP,0)),0) CONSMP,
			0 AS DMD, 0 AS DBT, 0 AS RBT, 0 AS WDRL, 0 AS COL, 0 AS CRDT
			FROM CUST_MASTER, CUSTBILL_MASTER
			WHERE CM_RR_NO = CBM_RR_NO
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%'
			AND CBM_BILL_DT BETWEEN TO_DATE(P_FROM_DT,'DD/MM/YYYY') AND TO_DATE(P_TO_DT,'DD/MM/YYYY')
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(CBM_BILL_DT,'DD')
			
			UNION
			
			SELECT  CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(CBB_BILL_DT,'DD') DT, 0 AS CONSMP,
			ROUND(SUM(NVL(CBB_AMT_BILLED,0)),4) DMD, 0 AS DBT, 0 AS RBT, 0 AS WDRL, 0 AS COL, 0 AS CRDT
			FROM CUST_MASTER, CUSTBILL_BREAKUP
			WHERE CM_RR_NO = CBB_RR_NO
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%' 
			AND CBB_BILL_DT BETWEEN  TO_DATE(P_FROM_DT,'DD/MM/YYYY') AND TO_DATE(P_TO_DT,'DD/MM/YYYY')
			AND CBB_CHRG_CD IN ('0007','0004','0067','0090','0027','0001','0008','0005','0011','0009','0080','0002','0088','0089')
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(CBB_BILL_DT,'DD')
			
			UNION
			
			SELECT CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(CDE_TMPSTP,'DD') DT,
			0 AS CONSMP, 0 AS DMD, ROUND(SUM(NVL(CDE_DEBIT_AMT,0)),4)  DBT, 0 AS RBT, 0 AS WDRL, 0 AS COL, 0 AS CRDT
			FROM CUST_MASTER, CUST_DEBIT
			WHERE CM_RR_NO = CDE_RR_NO 
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%'
			AND CDE_CHRG_CD <> '0078'
			AND CDE_TMPSTP >=  TO_DATE(P_FROM_DT,'DD/MM/YYYY')
			AND CDE_TMPSTP <  TO_DATE(P_TO_DT,'DD/MM/YYYY') + 1
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(CDE_TMPSTP,'DD')
			
			UNION
			
			SELECT CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(CRD_BILL_DT,'DD') DT,
			0 AS CONSMP, 0 AS DMD, 0 AS DBT, ROUND(NVL(SUM(CRD_REBATE_AMT),0),4) RBT, 0 AS WDRL, 0 AS COL, 0 AS CRDT
			FROM CUST_MASTER, CUSTBILL_REBATE_DETL
			WHERE CM_RR_NO = CRD_RR_NO 
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%'
			AND CRD_BILL_DT BETWEEN TO_DATE(P_FROM_DT,'DD/MM/YYYY') AND TO_DATE(P_TO_DT,'DD/MM/YYYY')
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(CRD_BILL_DT,'DD')
			
			UNION
			
			SELECT CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(WD_WDRL_DT,'DD') DT,
			0 AS CONSMP, 0 AS DMD, 0 AS DBT, 0 AS RBT, ROUND(NVL(SUM(WD_AMT_WDRN),0),4) WDRL, 0 AS COL, 0 AS CRDT
			FROM CUST_MASTER, WDRL_DETL
			WHERE CM_RR_NO = WD_RR_NO
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%'
			AND WD_WDRL_DT BETWEEN TO_DATE(P_FROM_DT,'DD/MM/YYYY') AND TO_DATE(P_TO_DT,'DD/MM/YYYY')
			AND WD_APPRV_STS = 'Y'
			AND WD_CHRG_CD IN ('1012','1015','1009','1011','1022','1025','1034','1045','1052','1006','0080','0079','0078','0009','0027','0045',
												 '0034','0025','0022','0011','0012','0015','0008','0005','0077','0002','1002','0081','0082','0007','0004','0067','1067')
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(WD_WDRL_DT,'DD')
			
			UNION
			
			
			SELECT  CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(IRP_RCPT_DT,'DD') DT,
			0 AS CONSMP, 0 AS DMD, 0 AS DBT, 0 AS RBT, 0 AS WDRL, SUM(NVL(IRP_AMT_PAID,0)) COL, 0 AS CRDT
			FROM INITIAL_RCPT_PYMNT
			LEFT OUTER JOIN CUST_MASTER ON CM_RR_NO = NVL(IRP_NEW_PURPOSE_KEY,IRP_PURPOSE_KEY)
			WHERE IRP_RCPT_DT BETWEEN TO_DATE(P_FROM_DT,'DD/MM/YYYY') AND TO_DATE(P_TO_DT,'DD/MM/YYYY')
			AND NVL(IRP_NEW_PURPOSE_KEY,IRP_PURPOSE_KEY) LIKE P_LOCATION_CODE||'%'
			AND NVL(IRP_CANCEL_FLG,'N') = 'N'
			AND IRP_PURPOSE = '1'
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(IRP_RCPT_DT,'DD')
			
			UNION
			
			SELECT CM_OM_UNIT_CD OM, CM_MTR_RDR_CD MR, CM_TRF_CATG TRF, TRUNC(CCD_TMPSTP,'DD') DT,
			0 AS CONSMP, 0 AS DMD, 0 AS DBT, 0 AS RBT, 0 AS WDRL, 0 AS COL, ROUND(NVL(SUM(CCD_CR_AMT), 0), 2)  CRDT
			FROM CUST_MASTER, CUST_CREDIT_DETL
			WHERE CM_RR_NO = CCD_RR_NO
			AND CM_RR_NO LIKE P_LOCATION_CODE||'%'
			AND CCD_TMPSTP >= TO_DATE(P_FROM_DT,'DD/MM/YYYY')
			AND CCD_TMPSTP <  TO_DATE(P_TO_DT,'DD/MM/YYYY')+1
			AND CCD_CR_FROM IN ('06','09', '10')
			AND CCD_APPRV_STS='Y'
			GROUP BY CM_OM_UNIT_CD, CM_MTR_RDR_CD, CM_TRF_CATG, TRUNC(CCD_TMPSTP,'DD')
			)
			LEFT OUTER JOIN TRF_MASTER T ON T.TM_TRF_CODE = TRF
			GROUP BY SUBSTR(REPLACE(TM_SDESCR,'DB'),1,3)
			ORDER BY 1)
			
			SELECT ROWNUM ROW_NO, '' MRCODE, A.* FROM
			(SELECT * FROM
			(SELECT TRF, CONSMP, DMD, COL, CRDT,
			(CASE WHEN NVL(DMD,0) = 0 THEN '0%' ELSE ROUND(((COL+CRDT)/DMD)*100,2)||'%' END) COL_EFF,
			(CASE WHEN NVL(CONSMP,0) = 0 THEN 0 ELSE ROUND(DMD/CONSMP,2) END) DMDARR,
			(CASE WHEN NVL(CONSMP,0) = 0 THEN 0 ELSE ROUND((COL+CRDT)/CONSMP,2) END) COLARR
			FROM T
			UNION
			SELECT 'Total:' TRF, SUM(CONSMP) CONSMP, SUM(DMD) DMD, SUM(COL) COL, SUM(CRDT) CRDT,
			(CASE WHEN NVL(SUM(DMD),0) = 0 THEN '0%' ELSE ROUND(((SUM(COL)+SUM(CRDT))/SUM(DMD))*100,2)||'%' END) COL_EFF,
			(CASE WHEN NVL(SUM(CONSMP),0) = 0 THEN 0 ELSE ROUND(SUM(DMD)/SUM(CONSMP),2) END) DMDARR,
			(CASE WHEN NVL(SUM(CONSMP),0) = 0 THEN 0 ELSE ROUND((SUM(COL)+SUM(CRDT))/SUM(CONSMP),2) END) COLARR
			FROM T )
			ORDER BY REPLACE(NVL(TRF,'ZZ'),'Total:','ZZZ') )  A;

			    
		ELSIF P_GROUP_TYPE = 'SUBTRF' THEN
		
			OPEN cur FOR SELECT SYSDATE FROM DUAL;      
	   
		END IF;
		
		   	--OPEN cur FOR STR;
		    --OPEN cur FOR select str from dual;
	   	ELSE    
	   	
	   	    OPEN cur FOR select 'Invalid input' AS RESP from dual; 
	   	    
	   	END IF;


END GET_COLLECTION_EFFICIENCY;

/